import { Component, ElementRef, OnDestroy, AfterViewInit, ViewChild } from '@angular/core';

@Component({
  selector: 'app-loader',
  template: `
    <canvas #tangramCanvas></canvas>
    <div class="figure-label">Figura {{ getFigureName() }}</div>
  `,
  styleUrls: ['./loader.component.css']
})
export class LoaderComponent implements AfterViewInit, OnDestroy {

  @ViewChild("tangramCanvas") canvasRef!: ElementRef<HTMLCanvasElement>;
  private ctx!: CanvasRenderingContext2D;
  private animationFrame!: number;
  private currentState = 0;
  // Transición dividida en dos fases:
  // 0–0.5: desarme de la figura actual.
  // 0.5–1: armado de la siguiente figura.
  private transitionProgress = 0;
  private transitionSpeed = 0.008;
  private colors = {
    blue: "#4999C8",
    teal: "#49C8B1",
    purple: "#8A49C8",
    orange: "#C87949",
    yellow: "#C8BE49"
  };

  ngAfterViewInit(): void {
    const canvas = this.canvasRef.nativeElement;
    this.ctx = canvas.getContext("2d")!;
    canvas.width = 400;
    canvas.height = 800;
    this.animate();
  }

  /**
   * Función de easing para suavizar la animación.
   * Se utiliza una easing in-out (senoidal) para que el cambio sea progresivo.
   */
  ease(t: number): number {
    return -(Math.cos(Math.PI * t) - 1) / 2;
  }

  animate(): void {
    this.animationFrame = requestAnimationFrame(() => this.animate());
    const canvas = this.canvasRef.nativeElement;
    // En lugar de borrar completamente el canvas, dibujamos un rectángulo semitransparente
    // para que los dibujos anteriores se desvanezcan suavemente.
    this.ctx.fillStyle = 'rgba(255,255,255,0.2)';
    this.ctx.fillRect(0, 0, canvas.width, canvas.height);

    this.transitionProgress += this.transitionSpeed;
    if (this.transitionProgress >= 1) {
      this.transitionProgress = 0;
      this.currentState = (this.currentState + 1) % 3;
    }
    this.drawTangramState();
  }

  drawTangramState(): void {
    const canvas = this.canvasRef.nativeElement;
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    // Escala: usamos el 80% del menor de ancho y alto
    const size = Math.min(canvas.width, canvas.height) * 0.8;
    this.ctx.save();
    this.ctx.translate(centerX, centerY);

    // Si transitionProgress < 0.5: se desarma la figura actual.
    // Si >= 0.5: se arma la siguiente figura.
    if (this.transitionProgress < 0.5) {
      const factor = this.ease(this.transitionProgress / 0.5); // factor de 0 a 1
      switch (this.currentState) {
        case 0:
          this.drawFigure73Transition(size, factor, 'disassemble');
          break;
        case 1:
          this.drawFigure156Transition(size, factor, 'disassemble');
          break;
        case 2:
          this.drawFigure200Transition(size, factor, 'disassemble');
          break;
      }
    } else {
      const factor = this.ease((this.transitionProgress - 0.5) / 0.5);
      const nextState = (this.currentState + 1) % 3;
      switch (nextState) {
        case 0:
          this.drawFigure73Transition(size, factor, 'assemble');
          break;
        case 1:
          this.drawFigure156Transition(size, factor, 'assemble');
          break;
        case 2:
          this.drawFigure200Transition(size, factor, 'assemble');
          break;
      }
    }
    this.ctx.restore();
  }

  /**
   * Helper para aplicar un desplazamiento y rotación extra a una pieza durante la transición.
   * @param drawFunc Función que dibuja la pieza en su posición base.
   * @param displacement Objeto {x, y} de desplazamiento máximo.
   * @param extraRotation Ángulo extra (en grados) a aplicar.
   * @param factor Valor de transición entre 0 y 1.
   */
  drawPieceWithTransition(
    drawFunc: () => void,
    displacement: { x: number, y: number },
    extraRotation: number,
    factor: number
  ): void {
    this.ctx.save();
    this.ctx.translate(displacement.x * factor, displacement.y * factor);
    this.ctx.rotate(extraRotation * factor * Math.PI / 180);
    drawFunc();
    this.ctx.restore();
  }

  /*------------------------------------------
    FIGURA 73 – SILUETA HUMANA REZANDO
  ------------------------------------------*/
  drawFigure73(size: number): void {
    const half = size / 2, quarter = size / 4, eighth = size / 8;
    // Cabeza
    this.drawRotatedSquare(-quarter / 2, -half - quarter, quarter, 45, this.colors.blue);
    // Triángulo detrás de la cabeza
    const headBottomY = -half, offsetRight = quarter - 55;
    this.drawTriangle(
      offsetRight, headBottomY,
      offsetRight - eighth - 20, headBottomY + 19 + eighth,
      offsetRight, headBottomY + 2.8 * eighth,
      this.colors.teal
    );
    // Romboidee volteado
    const A = { x: offsetRight + 4, y: headBottomY };
    const B = { x: offsetRight + (eighth + 20), y: headBottomY + (19 + eighth) };
    const C = { x: offsetRight + 3.25, y: headBottomY + 2.88 * eighth };
    const D = { x: offsetRight + 59, y: headBottomY + 2.75 * eighth + (19 + eighth) };
    this.drawRomboidee(A.x, A.y, B.x, B.y, D.x, D.y, C.x, C.y, this.colors.purple);
    // Triángulo del cuerpo medio
    const T1 = { x: offsetRight - eighth - 19.2, y: headBottomY + 4.5 + (19 + eighth) };
    const T2 = { x: offsetRight + 57, y: headBottomY + 2.8 * eighth + (19 + eighth) };
    const T3 = { x: T1.x, y: T2.y + 90 };
    this.drawTriangle(T1.x, T1.y, T2.x, T2.y, T3.x, T3.y, this.colors.orange);
    // Triángulo simulando los pies
    const nV1 = { x: offsetRight - eighth + 95, y: -headBottomY + (-55 + eighth) };
    const nV2 = { x: offsetRight + 58, y: headBottomY + 2.88 * eighth + (19 + eighth) };
    const nV3 = { x: nV1.x - 160, y: nV2.y + 130 };
    this.drawTriangle(nV1.x, nV1.y, nV2.x, nV2.y, nV3.x, nV3.y, this.colors.yellow);
    // Brazo
    const nT1 = { x: offsetRight - eighth - 22.8, y: headBottomY + 5 + (19 + eighth) };
    const nT2 = { x: nT1.x, y: nT1.y + 100 };
    const nT3 = { x: nT1.x - 110, y: nT1.y };
    this.drawTriangle(nT1.x, nT1.y, nT2.x, nT2.y, nT3.x, nT3.y, this.colors.blue);
    // Terminación de la mano
    const mT1 = { x: nT2.x, y: nT2.y + 4.5 };
    const mT2 = { x: mT1.x - 84, y: mT1.y - 75 };
    const mT3 = { x: mT1.x - 80, y: mT1.y };
    this.drawTriangle(mT1.x, mT1.y, mT2.x, mT2.y, mT3.x, mT3.y, this.colors.yellow);
  }

  /**
   * Transición para FIGURA 73.
   * Si mode = 'disassemble', las piezas se separan y giran desde la configuración base;
   * si mode = 'assemble', se invierte el efecto para llegar a la forma predeterminada.
   */
  drawFigure73Transition(size: number, factor: number, mode: 'disassemble' | 'assemble'): void {
    const half = size / 2, quarter = size / 4, eighth = size / 8;
    const currentFactor = mode === 'disassemble' ? factor : (1 - factor);

    this.drawPieceWithTransition(() => {
      this.drawRotatedSquare(-quarter / 2, -half - quarter, quarter, 45, this.colors.blue);
    }, { x: 0, y: -20 }, 30, currentFactor);

    this.drawPieceWithTransition(() => {
      this.drawTriangle(
        quarter - 55, -half,
        (quarter - 55) - eighth - 20, -half + 19 + eighth,
        quarter - 55, -half + 2.8 * eighth,
        this.colors.teal
      );
    }, { x: 20, y: -20 }, 20, currentFactor);

    this.drawPieceWithTransition(() => {
      const A = { x: (quarter - 55) + 4, y: -half };
      const B = { x: (quarter - 55) + (eighth + 20), y: -half + (19 + eighth) };
      const C = { x: (quarter - 55) + 3.25, y: -half + 2.88 * eighth };
      const D = { x: (quarter - 55) + 59, y: -half + 2.75 * eighth + (19 + eighth) };
      this.drawRomboidee(A.x, A.y, B.x, B.y, D.x, D.y, C.x, C.y, this.colors.purple);
    }, { x: -20, y: 20 }, 25, currentFactor);

    this.drawPieceWithTransition(() => {
      const T1 = { x: (quarter - 55) - eighth - 19.2, y: -half + 4.5 + (19 + eighth) };
      const T2 = { x: (quarter - 55) + 57, y: -half + 2.8 * eighth + (19 + eighth) };
      const T3 = { x: T1.x, y: T2.y + 90 };
      this.drawTriangle(T1.x, T1.y, T2.x, T2.y, T3.x, T3.y, this.colors.orange);
    }, { x: 0, y: 30 }, 20, currentFactor);

    this.drawPieceWithTransition(() => {
      const nV1 = { x: (quarter - 55) - eighth + 95, y: half + (-55 + eighth) };
      const nV2 = { x: (quarter - 55) + 58, y: -half + 2.88 * eighth + (19 + eighth) };
      const nV3 = { x: nV1.x - 160, y: nV2.y + 130 };
      this.drawTriangle(nV1.x, nV1.y, nV2.x, nV2.y, nV3.x, nV3.y, this.colors.yellow);
    }, { x: -30, y: 30 }, 30, currentFactor);

    this.drawPieceWithTransition(() => {
      const nT1 = { x: (quarter - 55) - eighth - 22.8, y: -half + 5 + (19 + eighth) };
      const nT2 = { x: nT1.x, y: nT1.y + 100 };
      const nT3 = { x: nT1.x - 110, y: nT1.y };
      this.drawTriangle(nT1.x, nT1.y, nT2.x, nT2.y, nT3.x, nT3.y, this.colors.blue);
    }, { x: 30, y: -30 }, 30, currentFactor);

    this.drawPieceWithTransition(() => {
      const mT1 = { x: (quarter - 55) - eighth - 22.8, y: -half + 5 + (19 + eighth) + 100 + 4.5 };
      const mT2 = { x: mT1.x - 84, y: mT1.y - 75 };
      const mT3 = { x: mT1.x - 80, y: mT1.y };
      this.drawTriangle(mT1.x, mT1.y, mT2.x, mT2.y, mT3.x, mT3.y, this.colors.yellow);
    }, { x: -30, y: 30 }, 20, currentFactor);
  }

  /*------------------------------------------
    FIGURA 156 – TIPO PAJARO
  ------------------------------------------*/
  drawFigure156(size: number): void {
    const half = size / 2, quarter = size / 4, eighth = size / 8;
    this.drawTriangle(-quarter, -half, quarter, -half, 0, -quarter, this.colors.purple);
    this.drawRotatedRightTriangle(-half + 158, half - 237, 70, 75, 135, this.colors.blue);
    this.drawRotatedRightTriangle(half - 210, half - 184, 150, 150, -45, this.colors.yellow);
    this.drawRotatedRightTriangle(-half + 106.2, half - 185, 70, 75, 135, this.colors.teal);
    this.drawParallelogramInclined(-half + 220, half - 190, 62, 110, -30, this.colors.teal);
    this.drawRotatedSquare(-86, -7, 68, 45, this.colors.yellow);
    this.drawRotatedRightTriangle(-half + 158.5, half - 130, 140, 140, 45, this.colors.orange);
  }

  drawFigure156Transition(size: number, factor: number, mode: 'disassemble' | 'assemble'): void {
    const half = size / 2, quarter = size / 4, eighth = size / 8;
    const currentFactor = mode === 'disassemble' ? factor : (1 - factor);

    this.drawPieceWithTransition(() => {
      this.drawTriangle(-quarter, -half, quarter, -half, 0, -quarter, this.colors.purple);
    }, { x: 0, y: -30 }, 30, currentFactor);
    this.drawPieceWithTransition(() => {
      this.drawRotatedRightTriangle(-half + 158, half - 237, 70, 75, 135, this.colors.blue);
    }, { x: -20, y: 20 }, 20, currentFactor);
    this.drawPieceWithTransition(() => {
      this.drawRotatedRightTriangle(half - 210, half - 184, 150, 150, -45, this.colors.yellow);
    }, { x: 20, y: -20 }, 25, currentFactor);
    this.drawPieceWithTransition(() => {
      this.drawRotatedRightTriangle(-half + 106.2, half - 185, 70, 75, 135, this.colors.teal);
    }, { x: 30, y: 30 }, 20, currentFactor);
    this.drawPieceWithTransition(() => {
      this.drawParallelogramInclined(-half + 220, half - 190, 62, 110, -30, this.colors.teal);
    }, { x: -30, y: -30 }, 25, currentFactor);
    this.drawPieceWithTransition(() => {
      this.drawRotatedSquare(-86, -7, 68, 45, this.colors.yellow);
    }, { x: 0, y: 20 }, 20, currentFactor);
    this.drawPieceWithTransition(() => {
      this.drawRotatedRightTriangle(-half + 158.5, half - 130, 140, 140, 45, this.colors.orange);
    }, { x: -20, y: 0 }, 20, currentFactor);
  }

  /*------------------------------------------
    FIGURA 200 – PATRÓN GEOMÉTRICO ABSTRACTO
  ------------------------------------------*/
  drawFigure200(size: number): void {
    const half = size / 2, quarter = size / 4, eighth = size / 8;
    const parallelogramWidth = 65, parallelogramHeight = 50;
    const parallelogramX = -140, parallelogramY = -140;
    this.drawParallelogramInclined(parallelogramX, parallelogramY, parallelogramWidth, parallelogramHeight, 140, this.colors.blue);
    const triangleX = parallelogramX + parallelogramWidth / 2;
    const triangleY = parallelogramY + parallelogramHeight;
    const triangleBase = parallelogramWidth, triangleHeight = parallelogramHeight;
    this.drawRotatedRightTriangle(triangleX + 33, triangleY + 4, triangleBase, triangleHeight + 4, 180, this.colors.orange);
    const topPointX = parallelogramX + parallelogramWidth;
    const topPointY = parallelogramY;
    const bottomPointX = triangleX + parallelogramWidth;
    const bottomPointY = triangleY + parallelogramHeight;
    this.drawRotatedRightTriangle(topPointX + 3.5, topPointY + 54, bottomPointX - topPointX + 76, bottomPointY - topPointY + 30, 270, this.colors.teal);
    const baseSmallTriangleX = triangleX, baseSmallTriangleY = triangleY + parallelogramHeight;
    const newTriangleEndX = baseSmallTriangleX + 100, newTriangleEndY = baseSmallTriangleY + 50;
    this.drawRotatedRightTriangle(baseSmallTriangleX + 97, baseSmallTriangleY - 42.5, newTriangleEndX - baseSmallTriangleX + 20, newTriangleEndY - baseSmallTriangleY + 80, 90, this.colors.purple);
    let baseTriangleX = parallelogramX + parallelogramWidth / 2;
    let baseTriangleY = parallelogramY + parallelogramHeight;
    this.drawRotatedRightTriangle(baseTriangleX + 100, baseTriangleY + 8, parallelogramWidth, parallelogramHeight + 4, 0, this.colors.orange);
    baseTriangleX = parallelogramX + parallelogramWidth / 2;
    baseTriangleY = parallelogramY + parallelogramHeight;
    this.drawRotatedRightTriangle(baseTriangleX + 169, baseTriangleY + 8.8, parallelogramWidth + 15, parallelogramHeight + 41, 49.5, this.colors.yellow);
    const lastTriangleX = baseTriangleX + 170, lastTriangleY = baseTriangleY + 8.5;
    const triangleBottomOffset = (parallelogramWidth + 15) * Math.sin(50 * Math.PI / 180);
    const bottomEdgeY = lastTriangleY + triangleBottomOffset;
    const triangleCenterX = lastTriangleX - 6.13;
    const squareSize = 100, gap = 10;
    const squareX = triangleCenterX - squareSize / 2, squareY = bottomEdgeY + gap;
    this.drawSquare(squareX - 13, squareY - 8, squareSize - 43, this.colors.blue);
  }

  drawFigure200Transition(size: number, factor: number, mode: 'disassemble' | 'assemble'): void {
    const currentFactor = mode === 'disassemble' ? factor : (1 - factor);
    const parallelogramWidth = 65, parallelogramHeight = 50;
    const parallelogramX = -140, parallelogramY = -140;
    this.drawPieceWithTransition(() => {
      this.drawParallelogramInclined(parallelogramX, parallelogramY, parallelogramWidth, parallelogramHeight, 140, this.colors.blue);
    }, { x: 0, y: -30 }, 30, currentFactor);
    this.drawPieceWithTransition(() => {
      const triangleX = parallelogramX + parallelogramWidth / 2;
      const triangleY = parallelogramY + parallelogramHeight;
      this.drawRotatedRightTriangle(triangleX + 33, triangleY + 4, parallelogramWidth, parallelogramHeight + 4, 180, this.colors.orange);
    }, { x: 20, y: 20 }, 25, currentFactor);
    this.drawPieceWithTransition(() => {
      const triangleX = parallelogramX + parallelogramWidth / 2;
      const triangleY = parallelogramY + parallelogramHeight;
      const topPointX = parallelogramX + parallelogramWidth;
      const topPointY = parallelogramY;
      const bottomPointX = triangleX + parallelogramWidth;
      const bottomPointY = triangleY + parallelogramHeight;
      this.drawRotatedRightTriangle(topPointX + 3.5, topPointY + 54, bottomPointX - topPointX + 76, bottomPointY - topPointY + 30, 270, this.colors.teal);
    }, { x: -20, y: 20 }, 25, currentFactor);
    this.drawPieceWithTransition(() => {
      const triangleX = parallelogramX + parallelogramWidth / 2;
      const triangleY = parallelogramY + parallelogramHeight;
      const baseSmallTriangleX = triangleX;
      const baseSmallTriangleY = triangleY + parallelogramHeight;
      const newTriangleEndX = baseSmallTriangleX + 100;
      const newTriangleEndY = baseSmallTriangleY + 50;
      this.drawRotatedRightTriangle(baseSmallTriangleX + 97, baseSmallTriangleY - 42.5, newTriangleEndX - baseSmallTriangleX + 20, newTriangleEndY - baseSmallTriangleY + 80, 90, this.colors.purple);
    }, { x: 0, y: -20 }, 20, currentFactor);
    this.drawPieceWithTransition(() => {
      const baseTriangleX = parallelogramX + parallelogramWidth / 2;
      const baseTriangleY = parallelogramY + parallelogramHeight;
      this.drawRotatedRightTriangle(baseTriangleX + 100, baseTriangleY + 8, parallelogramWidth, parallelogramHeight + 4, 0, this.colors.orange);
    }, { x: -20, y: 20 }, 20, currentFactor);
    this.drawPieceWithTransition(() => {
      const baseTriangleX = parallelogramX + parallelogramWidth / 2;
      const baseTriangleY = parallelogramY + parallelogramHeight;
      this.drawRotatedRightTriangle(baseTriangleX + 169, baseTriangleY + 8.8, parallelogramWidth + 15, parallelogramHeight + 41, 49.5, this.colors.yellow);
    }, { x: 20, y: -20 }, 20, currentFactor);
    this.drawPieceWithTransition(() => {
      const triangleX = parallelogramX + parallelogramWidth / 2;
      const triangleY = parallelogramY + parallelogramHeight;
      const baseTriangleX = parallelogramX + parallelogramWidth / 2;
      const baseTriangleY = parallelogramY + parallelogramHeight;
      const lastTriangleX = baseTriangleX + 170;
      const lastTriangleY = baseTriangleY + 8.5;
      const triangleBottomOffset = (parallelogramWidth + 15) * Math.sin(50 * Math.PI / 180);
      const bottomEdgeY = lastTriangleY + triangleBottomOffset;
      const triangleCenterX = lastTriangleX - 6.13;
      const squareSize = 100, gap = 10;
      const squareX = triangleCenterX - squareSize / 2;
      const squareY = bottomEdgeY + gap;
      this.drawSquare(squareX - 13, squareY - 8, squareSize - 43, this.colors.blue);
    }, { x: 0, y: 30 }, 20, currentFactor);
  }

  /*------------------------------------------
    MÉTODOS BÁSICOS DE DIBUJO
  ------------------------------------------*/
  drawRomboidee(x1: number, y1: number, x2: number, y2: number,
                x3: number, y3: number, x4: number, y4: number, color: string): void {
    this.ctx.beginPath();
    this.ctx.moveTo(x1, y1);
    this.ctx.lineTo(x2, y2);
    this.ctx.lineTo(x3, y3);
    this.ctx.lineTo(x4, y4);
    this.ctx.closePath();
    this.ctx.fillStyle = color;
    this.ctx.fill();
    this.ctx.strokeStyle = "#000";
    this.ctx.lineWidth = 1;
    this.ctx.stroke();
  }

  drawRotatedParallelogram(x: number, y: number, width: number, height: number, color: string, angle: number): void {
    this.ctx.save();
    this.ctx.translate(x + width / 2, y + height / 2);
    this.ctx.rotate(angle * Math.PI / 180);
    this.ctx.beginPath();
    this.ctx.moveTo(-width / 2, -height / 2);
    this.ctx.lineTo(width / 2, -height / 2);
    this.ctx.lineTo(width / 2 - height, height / 2);
    this.ctx.lineTo(-width / 2 - height, height / 2);
    this.ctx.closePath();
    this.ctx.fillStyle = color;
    this.ctx.fill();
    this.ctx.strokeStyle = "#000";
    this.ctx.lineWidth = 1;
    this.ctx.stroke();
    this.ctx.restore();
  }

  drawRotatedRightTriangle(x: number, y: number, width: number, height: number, angle: number, color: string): void {
    this.ctx.save();
    this.ctx.translate(x, y);
    this.ctx.rotate(angle * Math.PI / 180);
    this.ctx.beginPath();
    this.ctx.moveTo(0, 0);
    this.ctx.lineTo(width, 0);
    this.ctx.lineTo(0, height);
    this.ctx.closePath();
    this.ctx.fillStyle = color;
    this.ctx.fill();
    this.ctx.strokeStyle = "#000";
    this.ctx.lineWidth = 1;
    this.ctx.stroke();
    this.ctx.restore();
  }

  drawParallelogramInclined(x: number, y: number, width: number, height: number, angle: number, color: string): void {
    const radian = angle * Math.PI / 180;
    const offset = width * Math.tan(radian);
    const x1 = x, y1 = y;
    const x2 = x + width, y2 = y + offset;
    const x3 = x + width, y3 = y + height + offset;
    const x4 = x, y4 = y + height;
    this.ctx.beginPath();
    this.ctx.moveTo(x1, y1);
    this.ctx.lineTo(x2, y2);
    this.ctx.lineTo(x3, y3);
    this.ctx.lineTo(x4, y4);
    this.ctx.closePath();
    this.ctx.fillStyle = color;
    this.ctx.fill();
    this.ctx.strokeStyle = "#000";
    this.ctx.lineWidth = 1;
    this.ctx.stroke();
  }

  drawTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, color: string): void {
    this.ctx.beginPath();
    this.ctx.moveTo(x1, y1);
    this.ctx.lineTo(x2, y2);
    this.ctx.lineTo(x3, y3);
    this.ctx.closePath();
    this.ctx.fillStyle = color;
    this.ctx.fill();
    this.ctx.strokeStyle = "#000";
    this.ctx.lineWidth = 1;
    this.ctx.stroke();
  }

  drawSquare(x: number, y: number, size: number, color: string): void {
    this.ctx.fillStyle = color;
    this.ctx.fillRect(x, y, size, size);
    this.ctx.strokeStyle = "#000";
    this.ctx.lineWidth = 1;
    this.ctx.strokeRect(x, y, size, size);
  }

  drawRotatedSquare(x: number, y: number, size: number, angle: number, color: string): void {
    const centerX = x + size / 2;
    const centerY = y + size / 2;
    this.ctx.save();
    this.ctx.translate(centerX, centerY);
    this.ctx.rotate(angle * Math.PI / 180);
    this.ctx.fillStyle = color;
    this.ctx.fillRect(-size / 2, -size / 2, size, size);
    this.ctx.strokeStyle = "#000";
    this.ctx.lineWidth = 1;
    this.ctx.strokeRect(-size / 2, -size / 2, size, size);
    this.ctx.restore();
  }

  getFigureName(): string {
    switch (this.currentState) {
      case 0: return "73";
      case 1: return "156";
      case 2: return "200";
      default: return "";
    }
  }

  ngOnDestroy(): void {
    if (this.animationFrame) {
      cancelAnimationFrame(this.animationFrame);
    }
  }
}
